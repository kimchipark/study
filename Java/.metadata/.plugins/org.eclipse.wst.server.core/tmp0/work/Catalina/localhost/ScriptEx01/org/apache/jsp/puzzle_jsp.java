/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.51
 * Generated at: 2022-08-31 08:12:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class puzzle_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>Sliding Puzzle</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"http://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css\">\r\n");
      out.write("    <style type=\"text/css\">\r\n");
      out.write("        #board {border: 1px solid #ccc;}\r\n");
      out.write("        #board td { width:30px; height:30px; padding:5px; text-align: center; }\r\n");
      out.write("        #board td.num {background-color: yellow; border:1px solid #000;  cursor: pointer;}\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("    \t<div class=\"page-header\">\r\n");
      out.write("        </div>\r\n");
      out.write("        <table id=\"board\">\r\n");
      out.write("        </table>\r\n");
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <script src=\"https://code.jquery.com/jquery-1.11.2.js\"></script>\r\n");
      out.write("    <script>\r\n");
      out.write("    (function($) {\r\n");
      out.write("        \"use strict\";\r\n");
      out.write("        var YLEN = 3, // 행 길이\r\n");
      out.write("            XLEN = 3, // 열 길이\r\n");
      out.write("            blank = YLEN * XLEN - 1, // 빈칸 위치\r\n");
      out.write("            BLANK = 0, // 빈칸의 값\r\n");
      out.write("            board = [], // 보드 배열 (YLEN x XLEN)\r\n");
      out.write("            boardEl = $('#board'); // 테이블 엘리먼트\r\n");
      out.write("\r\n");
      out.write("        function initPuzzle() { // 퍼즐 데이터를 초기화\r\n");
      out.write("            board = [];\r\n");
      out.write("            for (var y = 0; y < YLEN; y++) \r\n");
      out.write("            {\r\n");
      out.write("                board[y] = []; // 각 행마다 열 배열 설정\r\n");
      out.write("                for (var x = 0; x < XLEN; x++) \r\n");
      out.write("                {\r\n");
      out.write("                    var idx = y * XLEN + x;\r\n");
      out.write("                    if (idx < blank) board[y][x] = idx + 1; // 순서대로 숫자 할당\r\n");
      out.write("                    else board[y][x] = BLANK; // 마지막 빈칸 설정\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("            // 이동 방향\r\n");
      out.write("            var moves = ['r', 'l', 'd', 'u'];\r\n");
      out.write("            for (var z = 0; z < 500; z++) \r\n");
      out.write("            { // 500회 동안 무작위로 이동\r\n");
      out.write("                move(moves[parseInt(Math.random() * 4,10)], false);\r\n");
      out.write("            }\r\n");
      out.write("            // 데이터 초기화 후 화면 갱신\r\n");
      out.write("            updateBoard();\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function numClick() {\r\n");
      out.write("            var $this = $(this), index = parseInt($this.data('index')), x = index % YLEN, y = parseInt(index / XLEN);\r\n");
      out.write("\r\n");
      out.write("            if (y > 0 && board[y-1][x] == BLANK) {\r\n");
      out.write("                move('u', true);\r\n");
      out.write("            } else if (y < YLEN - 1 && board[y+1][x] == BLANK) {\r\n");
      out.write("                move('d', true);\r\n");
      out.write("            } else if (x > 0 && board[y][x-1] == BLANK) {\r\n");
      out.write("                move('l', true);\r\n");
      out.write("            } else if (x < XLEN - 1 && board[y][x+1] == BLANK) {\r\n");
      out.write("                move('r', true);\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function updateBoard() { // 퍼즐 데이터를 화면에 표시\r\n");
      out.write("            boardEl.empty(); // 테이블을 비우고\r\n");
      out.write("            var html = '';\r\n");
      out.write("            for (var y = 0; y < YLEN; y++) {\r\n");
      out.write("                html += '<tr>';\r\n");
      out.write("                for (var x = 0; x < XLEN; x++) {\r\n");
      out.write("                    if (board[y][x] != BLANK) html += '<td class=\"num\" data-index=\"' + (y * XLEN + x) + '\">' + board[y][x] + '</td>';\r\n");
      out.write("                    else html += '<td class=\"blank\">&nbsp;</td>'; // 빈칸\r\n");
      out.write("                }\r\n");
      out.write("                html += '</tr>';\r\n");
      out.write("            }\r\n");
      out.write("            boardEl.html(html);\r\n");
      out.write("\r\n");
      out.write("            $('td.num', boardEl).click(numClick);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function moveTo(to) { // 빈칸을 to 위치로 이동\r\n");
      out.write("            // 빈칸에 to 위치의 숫자 옮기고\r\n");
      out.write("            board[parseInt(blank / YLEN,10)][blank % XLEN] = board[parseInt(to / YLEN,10)][to % XLEN];\r\n");
      out.write("            // to 위치에 빈칸 값 설정\r\n");
      out.write("            board[parseInt(to / YLEN,10)][to % XLEN] = BLANK;\r\n");
      out.write("            // to 위치를 빈칸으로 설정\r\n");
      out.write("            blank = to;\r\n");
      out.write("            // 화면 갱신\r\n");
      out.write("            updateBoard();\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function isEnd() {\r\n");
      out.write("            for (var y = 0; y < YLEN; y++) {\r\n");
      out.write("                for (var x = 0; x < XLEN; x++) {\r\n");
      out.write("                    var expect = y * XLEN + x + 1;  // 기대값\r\n");
      out.write("                    if (y * XLEN + x < YLEN * XLEN - 1) { // 마지막 칸은 제외\r\n");
      out.write("                        if (board[y][x] != expect) return; // 기대값이 아니면 중단\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("            // 여기 까지 코드가 진행 됐다면. 성공.\r\n");
      out.write("            alert('ok');\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function move(d, human) { // 이동 (가능한 경우)\r\n");
      out.write("            // d : 이동 방향\r\n");
      out.write("            // human : 사람이 이동 했는지 여부 (초기화를 위해)\r\n");
      out.write("            switch (d) {\r\n");
      out.write("                case 'r': // right : 빈칸이 맨 좌측이 아니면 빈칸을 좌측으로 이동\r\n");
      out.write("                    if (blank % XLEN > 0) moveTo(blank - 1);\r\n");
      out.write("                    break;\r\n");
      out.write("                case 'l': // left : 빈칸이 맨 우측이 아니면 빈칸을 우측으로 이동\r\n");
      out.write("                    if (blank % XLEN < XLEN - 1) moveTo(blank + 1);\r\n");
      out.write("                    break;\r\n");
      out.write("                case 'd': // down : 빈칸이 멘 위가 아니면 빈칸을 위로 이동\r\n");
      out.write("                    if (parseInt(blank / YLEN,10) > 0) moveTo(blank - XLEN);\r\n");
      out.write("                    break;\r\n");
      out.write("                case 'u': // up : 빈칸이 맨 아래가 아니면 빈칸을 아래로 이동\r\n");
      out.write("                    if (parseInt(blank / YLEN,10) < YLEN - 1) moveTo(blank + XLEN);\r\n");
      out.write("                    break;\r\n");
      out.write("            }\r\n");
      out.write("            // 사람이 움직였다면 완료 여부 체크\r\n");
      out.write("            if (human) isEnd();\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        initPuzzle(); // 보드 데이터 초기화\r\n");
      out.write("\r\n");
      out.write("    })(jQuery);\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
